using System;
using System.Collections.Generic;
using System.Linq;
using %NAMESPACE%.Models;

/// <summary>
/// %GENERATED%
/// Template last modified 2017-07-01
/// </summary>

namespace %NAMESPACE%.EF
{
    class %CLASS%
    {        
        private const string exceptionMessage = "A database exception occurred";

        /// <summary>
        /// Creates a new record in database
        /// </summary>
        /// <param name="newRecord">New model object to be created</param>
        /// <returns>Bool = true if success</returns>
        public static bool Create(%TABLE% newRecord)
        {
            try
            {
                using (%EFCONTEXT% context = new %EFCONTEXT%())
                {
                    //CREATED:TRUE newRecord.CREATED = DateTime.Now;
                    context.%TABLE%.Add(newRecord);
                    context.SaveChanges();
                    return true;
                }

            }
            catch (Exception ex)
            {
                throw new DatabaseException(exceptionMessage, ex);
            }
        }
        /// <summary>
        /// Update an existing record in database
        /// </summary>
        /// <param name="updatedRecord">Existing model object to be updated</param>
        /// <returns>Bool = true if success</returns>
        public static bool Update(%TABLE% updatedRecord)
        {
            try
            {
                using (%EFCONTEXT% context = new %EFCONTEXT%())
                {
                    //DELETED:TRUE %TABLE% existingRecord = context.%TABLE%.Where(w => w.%COL_PK% == updatedRecord.%COL_PK% && w.DELETED == null).FirstOrDefault();
                    //DELETED:FALSE %TABLE% existingRecord = context.%TABLE%.Where(w => w.%COL_PK% == updatedRecord.%COL_PK%).FirstOrDefault();
                    if (existingRecord != null)
                    {
                        //UPDATED:TRUE updatedRecord.UPDATED = DateTime.Now;
                        context.Entry(existingRecord).CurrentValues.SetValues(updatedRecord);
                        context.SaveChanges();
                    }

                    return true;
                }

            }
            catch (Exception ex)
            {
                throw new DatabaseException(exceptionMessage, ex);
            }
        }
        /// <summary>
        /// Delete an existing record out of database or mark as deleted
        /// </summary>
        /// <param name="id">Id (primary key) of the model object to be deleted</param>
        /// <returns>Bool = true if success</returns>
        public static bool DeleteById(%COL_DATATYPE% id)
        {
            try
            {
                using (%EFCONTEXT% context = new %EFCONTEXT%())
                {
                    //DELETED:TRUE %TABLE% existingRecord = context.%TABLE%.FirstOrDefault(w => w.%COL_PK% == id && w.DELETED == null);
                    //DELETED:FALSE %TABLE% existingRecord = context.%TABLE%.FirstOrDefault(w => w.%COL_PK% == id);

                    if (existingRecord != null)
                    {
                        //DELETED:TRUE existingRecord.DELETED = DateTime.Now;
                        //DELETED:FALSE context.%TABLE%.Remove(existingRecord);
                        context.SaveChanges();
                        return true;
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                throw new DatabaseException(exceptionMessage, ex);
            }
        }
		/// <summary>
        /// Drop an existing record out of database for ever
        /// </summary>
        /// <param name="id">Id (primary key) of the model object to be deleted</param>
        /// <returns>Bool = true if success</returns>
        public static bool DropById(%COL_DATATYPE% id)
        {
            try
            {
                using (%EFCONTEXT% context = new %EFCONTEXT%())
                {
                    %TABLE% existingRecord = context.%TABLE%.FirstOrDefault(w => w.%COL_PK% == id);

                    if (existingRecord != null)
                    {
                        context.%TABLE%.Remove(existingRecord);
                        context.SaveChanges();
                        return true;
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                throw new DatabaseException(exceptionMessage, ex);
            }
        }
        /// <summary>
        /// Get an existing record from database
        /// </summary>
        /// <param name="id">Id (primary key) of the model object requested to get</param>
        /// <returns>%TABLE% model object</returns>
        public static %TABLE% GetByID(%COL_DATATYPE% id)
        {
            try
            {
                using (%EFCONTEXT% context = new %EFCONTEXT%())
                {
                    //DELETED:TRUE var query = context.%TABLE%.Where(w => w.%COL_PK% == id && w.DELETED == null);
                    //DELETED:FALSE var query = context.%TABLE%.Where(w => w.%COL_PK% == id);
                    %TABLE% itm = query.FirstOrDefault();
                    if (itm != null)
                    {
                        return itm;
                    }
                    return null;

                }

            }
            catch (Exception ex)
            {
                throw new DatabaseException(exceptionMessage, ex);
            }

        }
        /// <summary>
        /// Returns a list of model objects out of database
        /// </summary>
        /// <returns>A list of %TABLE% - List of model object</returns>
        public static List<%TABLE%> GetList()
        {
            try
            {
                using (%EFCONTEXT% context = new %EFCONTEXT%())
                {
                     //DELETED:TRUE return context.%TABLE%.Where(w => w.DELETED == null).OrderBy(o => o.%ORDER_COL%).ToList();
                     //DELETED:FALSE return context.%TABLE%.OrderBy(o => o.%ORDER_COL%).ToList();
                }
            }
            catch (Exception ex)
            {
                throw new DatabaseException(exceptionMessage, ex);
            }

        }

//DELETED:TRUE         /// <summary>
//DELETED:TRUE         /// Deletes all marked deleted reportd from database constantly
//DELETED:TRUE         /// </summary>
//DELETED:TRUE         /// <returns>Number of deleted rerords (in)</returns>
//DELETED:TRUE         public static int CleanMarkedAsDeleted()
//DELETED:TRUE         {
//DELETED:TRUE             try
//DELETED:TRUE             {
//DELETED:TRUE                 using (%EFCONTEXT% context = new %EFCONTEXT%())
//DELETED:TRUE                 {
//DELETED:TRUE                     List<BENUTZER> lstMarkedDeleted = new List<BENUTZER>();
//DELETED:TRUE                     lstMarkedDeleted = context.%TABLE%.Where(w => w.DELETED != null).ToList();
//DELETED:TRUE                     if (lstMarkedDeleted.Count > 0)
//DELETED:TRUE                     {
//DELETED:TRUE                         context.%TABLE%.RemoveRange(lstMarkedDeleted);
//DELETED:TRUE                         context.SaveChanges();
//DELETED:TRUE                     }
//DELETED:TRUE                     return lstMarkedDeleted.Count;
//DELETED:TRUE                 }
//DELETED:TRUE             }
//DELETED:TRUE             catch (Exception ex)
//DELETED:TRUE             {
//DELETED:TRUE                 throw new DatabaseException(exceptionMessage, ex);
//DELETED:TRUE             }
//DELETED:TRUE 
//DELETED:TRUE         }


    }
}
