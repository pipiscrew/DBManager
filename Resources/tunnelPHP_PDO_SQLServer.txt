<?php
if (!isset($_POST["sql"]) || !isset($_POST["p"])) {
	echo json_encode("Error: no token1");
	return;
} else if ($_POST["p"] != **password entered at desktop program**) {
	echo json_encode("Error: no token2");
	return;
}

try {
	//on old server something wrong with json_decode, use also the same function '_json_decode', on transfer batch functions
	$x = _json_decode($_POST["sql"]);

	/////////////////////////////////////////////////////////////////////////////////////
	// 			SETUP SQLSERVER CONNECTION [START]
	/////////////////////////////////////////////////////////////////////////////////////
	$sql_servername = "x";
	$sql_user = "x";
	$sql_password = "x";
	$sql_database = "x"; 
		
	//setup a connection with MSSQL - help https://github.com/pipiscrew/DBManager/blob/master/1_updatePHP/pagination/general.php
	$db = new PDO("sqlsrv:server=$sql_servername;database=$sql_database", $sql_user, $sql_password, array(
				PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
				PDO::SQLSRV_ATTR_ENCODING => PDO::SQLSRV_ENCODING_UTF8,
				PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC));

	/* check connection */
	if (!$db) {
		printf("Connect failed");
		exit();
	}

	/////////////////////////////////////////////////////////////////////////////////////
	// 			SETUP SQLSERVER CONNECTION [END]
	/////////////////////////////////////////////////////////////////////////////////////



	if ($x -> q == "testconnection") {
		echo "true";
		return;
	} else if ($x -> q == 'dbschema') {
		
		header('Content-Type: application/json', true);
		
		$output = json_encode(array('result' => dbschema($db)));
		
		send_to_client($output);
		
		return;
	}
	
	$find_sql = $x -> q;

	$stmt      = $db->prepare($find_sql);

	$resultSET = null;
	
	if ($stmt->execute()) {
		$affected =  $stmt->rowCount();

		if ($affected == -1) {
			$resultSET = $stmt->fetchAll();
			$affected =  $stmt->rowCount();
		}

	} else {
		$e = var_dump($stmt->errorInfo());
		printf("Error: %s\n", $e);
		return;
	}

	
	//unicode
	header("Content-Type: application/json", true);

	$output = json_encode(array('result' => $resultSET, 'affected' => $affected));
	
	if (json_last_error() != 0)
	{
		echo "Error: PHP json_last_error = " . json_last_error();
		exit;
	}

	send_to_client($output);
	
}
catch (Exception $e) {
	$returnVAR = "Error:"  . $e->getMessage(); 
	
	echo $returnVAR;
	exit;
}


function send_to_client($val)
{
	$compression = "none";
	
	if (function_exists('bzcompress')) {
		$compression = "bzip";
		$val = bzcompress($val);
	} else if (function_exists('gzcompress')) {
		$compression = "gzip";
		$val = gzcompress($val);
	}
		
	
	echo json_encode(array("data" => base64_encode($val), "compression" => $compression));
}

function dbschema($dbase){
	
	$stmt = $dbase->prepare("SELECT sobjects.name FROM sysobjects sobjects WHERE sobjects.xtype = 'U' order by name");
	$stmt->execute();
	$tables = $stmt->fetchAll();

	$i = 0;
	foreach($tables as $tbl) {
	
		//for each table, query the fields
		$stmt = $dbase->prepare('exec sp_Columns [' . $tbl['name'] .']');

		$stmt->execute();
		$fields = $stmt->fetchAll();
		
		//we dont need all the fields, construct a small array for each table field
		$tbl_fields = array();
		foreach($fields as $fld) {
			$tbl_fields[] = array('TYPE_NAME' => $fld['TYPE_NAME'], 'PRECISION' => $fld['PRECISION'], 'COLUMN_NAME' => $fld['COLUMN_NAME'], 'NULLABLE' => $fld['NULLABLE']);
		}
		
		$tables[$i]['fields'] = $tbl_fields;

		$i+=1;
	}

	return $tables;
}
	
function _json_decode($string) {
	if (get_magic_quotes_gpc()) {
		$string = stripslashes($string);
	}

	return json_decode($string);
}
?>